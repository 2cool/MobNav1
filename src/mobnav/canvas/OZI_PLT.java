package mobnav.canvas;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 2cool
 */

import java.io.*;

import mobnav.tracks.TrackNode;

public class OZI_PLT {
     // ######################### S T A T I C  T R A C K ###########################

public static final int maxTrackA=63;
public static Point track[]=new Point[maxTrackA+1];
public static int trackI=0;
static private int trackIt;

static public String lastTrack=null;
static public Location lastLac=null;
static public long lastTime=0;

static public String save(){

	
	if (track[0]!=null){
		String out="";
		int i=0;
		for (; i<maxTrackA;i++)
			if (track[i]==null)
				break;
			else
				out+=track[i].toString()+" ";
		out+=trackI+" "+trackIt;
		return out;
	}else
		return "null";
}
static public void load(final Location loc){
	if (lastTrack!=null){
		String []a=TEXT.split(lastTrack, ' ');
		
		int in,i;
		for (i=0,in=0; in<a.length-2; i++,in+=2)
			track[i]=new Point(Integer.parseInt(a[in]), Integer.parseInt(a[in+1]));
		trackI=Integer.parseInt(a[in]);
		trackIt=Integer.parseInt(a[in+1]);
	}
	
}
static Point GetFirstPoint(){
    trackIt=trackI-1;
    if (trackI==0)
        return null;
    else
        return track[trackIt&maxTrackA];
}
static Point GetNextPoint(){
    trackIt--;
    if (trackIt<0 || trackI-trackIt>=maxTrackA)
        return null;
    else
        return track[trackIt&maxTrackA];
}





/////////////////////////////////////////////////////////////////////////////
static void WriteOZILocation(final OutputStream os, final Location l) throws IOException{
    String st=l.getLat()+",";
    st+=l.getLon()+",0,";
    st+="-777"+",";//*3.28084))+",";
    st+="0"+",,\n";
    os.write(st.getBytes());                
}
static void WriteOZIPoint(final OutputStream os, final Point gp) throws IOException{
   WriteOZILocation(os,Location.GetLocation(gp));   
}

/*
Field 1 : Latitude - decimal degrees.
Field 2 : Longitude - decimal degrees.
Field 3 : Code - 0 if normal, 1 if break in track line
Field 4 : Altitude in feet (-777 if not valid)
Field 5 : Date - see Date Format below, if blank a preset date will be used
Field 6 : Date as a string
Field 7 : Time as a string
*/
static public String marker="c ";
static void writeOZIPoint(final OutputStream os, final TrackNode tn) throws IOException{
	Location l=Location.GetLocation(tn.gp);
	String st=
		l.getLat()				+","+
		l.getLon()				+","+
		"0"	+","+
		(int)tn.fheight			+","+
								 ","+
		((tn.txt!=null)?TEXT.replace(marker+tn.txt, ",", "."):" ")+",\n";
	os.write(st.getBytes("UTF-8"));  
}

/*
Line 1 : File type and version information
Line 2 : Geodetic Datum used for the Lat/Lon positions for each trackpoint
Line 3 : "Altitude is in feet" - just a reminder that the altitude is always stored in feet
Line 4 : Reserved for future use
Line 5 : multiple fields as below

    Field 1 : always zero (0)
    Field 2 : width of track plot line on screen - 1 or 2 are usually the best
    Field 3 : track color (RGB)
    Field 4 : track description (no commas allowed)
    Field 5 : track skip value - reduces number of track points plotted, usually set to 1
    Field 6 : track type - 0 = normal , 10 = closed polygon , 20 = Alarm Zone
    Field 7 : track fill style - 0 =bsSolid; 1 =bsClear; 2 =bsBdiagonal; 3 =bsFdiagonal; 4 =bsCross;
    5 =bsDiagCross; 6 =bsHorizontal; 7 =bsVertical;
    Field 8 : track fill color (RGB)

Line 6 : Number of track points in the track, not used, the number of points is determined when reading the points file

Trackpoint data

    One line per trackpoint
    each field separated by a comma
    non essential fields need not be entered but comma separators must still be used (example ,,)
    defaults will be used for empty fields

Field 1 : Latitude - decimal degrees.
Field 2 : Longitude - decimal degrees.
Field 3 : Code - 0 if normal, 1 if break in track line
Field 4 : Altitude in feet (-777 if not valid)
Field 5 : Date - see Date Format below, if blank a preset date will be used
Field 6 : Date as a string
Field 7 : Time as a string

Note that OziExplorer reads the Date/Time from field 5, the date and time in fields 6 & 7 are ignored.

Example
-27.350436, 153.055540,1,-777,36169.6307194, 09-Jan-99, 3:08:14
-27.348610, 153.055867,0,-777,36169.6307194, 09-Jan-99, 3:08:14



*/
public static void WriteOZIHeader(final OutputStream os) throws IOException{
        os.write("OziExplorer Track Point File Version 2.1\n".getBytes());
        os.write("WGS 84\n".getBytes());
        os.write("Altitude is in Feet\n".getBytes());
        os.write("time in milliseconds from midnight January 1, 1970 UTC\n".getBytes());
        os.write("0,2,16711935,Generated by MobNav,0,0,2,8421376\n".getBytes());
        os.write("0\n".getBytes());               
    }


}
